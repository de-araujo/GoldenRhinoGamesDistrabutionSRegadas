#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GoldenRhinoGameDistribution
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GoldenRhino")]
	public partial class GoldenRhinoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertLogin_reg(Login_reg instance);
    partial void UpdateLogin_reg(Login_reg instance);
    partial void DeleteLogin_reg(Login_reg instance);
    partial void InsertPurchace(Purchace instance);
    partial void UpdatePurchace(Purchace instance);
    partial void DeletePurchace(Purchace instance);
    #endregion
		
		public GoldenRhinoDataContext() : 
				base(global::GoldenRhinoGameDistribution.Properties.Settings.Default.GoldenRhinoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GoldenRhinoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GoldenRhinoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GoldenRhinoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GoldenRhinoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Login_reg> Login_regs
		{
			get
			{
				return this.GetTable<Login_reg>();
			}
		}
		
		public System.Data.Linq.Table<Purchace> Purchaces
		{
			get
			{
				return this.GetTable<Purchace>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Genre;
		
		private string _Company;
		
		private string _Developer;
		
		private string _Title;
		
		private string _TitleType;
		
		private System.Data.Linq.Binary _image;
		
		private decimal _CostToCompany;
		
		private decimal _CostToUser;
		
		private System.DateTime _ReleaseDate;
		
		private string _DeliveryType;
		
		private int _Quantity;
		
		private EntitySet<Purchace> _Purchaces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnDeveloperChanging(string value);
    partial void OnDeveloperChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTitleTypeChanging(string value);
    partial void OnTitleTypeChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    partial void OnCostToCompanyChanging(decimal value);
    partial void OnCostToCompanyChanged();
    partial void OnCostToUserChanging(decimal value);
    partial void OnCostToUserChanged();
    partial void OnReleaseDateChanging(System.DateTime value);
    partial void OnReleaseDateChanged();
    partial void OnDeliveryTypeChanging(string value);
    partial void OnDeliveryTypeChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public Game()
		{
			this._Purchaces = new EntitySet<Purchace>(new Action<Purchace>(this.attach_Purchaces), new Action<Purchace>(this.detach_Purchaces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Developer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Developer
		{
			get
			{
				return this._Developer;
			}
			set
			{
				if ((this._Developer != value))
				{
					this.OnDeveloperChanging(value);
					this.SendPropertyChanging();
					this._Developer = value;
					this.SendPropertyChanged("Developer");
					this.OnDeveloperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TitleType
		{
			get
			{
				return this._TitleType;
			}
			set
			{
				if ((this._TitleType != value))
				{
					this.OnTitleTypeChanging(value);
					this.SendPropertyChanging();
					this._TitleType = value;
					this.SendPropertyChanged("TitleType");
					this.OnTitleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostToCompany", DbType="Money NOT NULL")]
		public decimal CostToCompany
		{
			get
			{
				return this._CostToCompany;
			}
			set
			{
				if ((this._CostToCompany != value))
				{
					this.OnCostToCompanyChanging(value);
					this.SendPropertyChanging();
					this._CostToCompany = value;
					this.SendPropertyChanged("CostToCompany");
					this.OnCostToCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostToUser", DbType="Money NOT NULL")]
		public decimal CostToUser
		{
			get
			{
				return this._CostToUser;
			}
			set
			{
				if ((this._CostToUser != value))
				{
					this.OnCostToUserChanging(value);
					this.SendPropertyChanging();
					this._CostToUser = value;
					this.SendPropertyChanged("CostToUser");
					this.OnCostToUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date NOT NULL")]
		public System.DateTime ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DeliveryType
		{
			get
			{
				return this._DeliveryType;
			}
			set
			{
				if ((this._DeliveryType != value))
				{
					this.OnDeliveryTypeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryType = value;
					this.SendPropertyChanged("DeliveryType");
					this.OnDeliveryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Purchace", Storage="_Purchaces", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Purchace> Purchaces
		{
			get
			{
				return this._Purchaces;
			}
			set
			{
				this._Purchaces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchaces(Purchace entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Purchaces(Purchace entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Login/reg]")]
	public partial class Login_reg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<Purchace> _Purchaces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Login_reg()
		{
			this._Purchaces = new EntitySet<Purchace>(new Action<Purchace>(this.attach_Purchaces), new Action<Purchace>(this.detach_Purchaces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_reg_Purchace", Storage="_Purchaces", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Purchace> Purchaces
		{
			get
			{
				return this._Purchaces;
			}
			set
			{
				this._Purchaces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchaces(Purchace entity)
		{
			this.SendPropertyChanging();
			entity.Login_reg = this;
		}
		
		private void detach_Purchaces(Purchace entity)
		{
			this.SendPropertyChanging();
			entity.Login_reg = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchace")]
	public partial class Purchace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _GameID;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Login_reg> _Login_reg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public Purchace()
		{
			this._Game = default(EntityRef<Game>);
			this._Login_reg = default(EntityRef<Login_reg>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Login_reg.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Purchace", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Purchaces.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Purchaces.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_reg_Purchace", Storage="_Login_reg", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public Login_reg Login_reg
		{
			get
			{
				return this._Login_reg.Entity;
			}
			set
			{
				Login_reg previousValue = this._Login_reg.Entity;
				if (((previousValue != value) 
							|| (this._Login_reg.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login_reg.Entity = null;
						previousValue.Purchaces.Remove(this);
					}
					this._Login_reg.Entity = value;
					if ((value != null))
					{
						value.Purchaces.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Login_reg");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
